{"version":3,"sources":["components/ContactList/Contact/Contact.module.css","components/Filter/Filter.module.css","components/transition/fade.module.css","components/transition/slide.module.css","components/ContactList/ContactList.module.css","components/App.module.css","components/transition/slideLogo.module.css","redux/contactsActions.js","redux/contactsSelectors.js","components/ContactForm/ContactForm.js","components/ContactForm/ContactFormContainer.js","components/Filter/Filter.js","components/Filter/FilterContainer.js","components/ContactList/Contact/Contact.js","components/ContactList/ContactList.js","components/ContactList/ContactListContainer.js","components/App.js","components/AppContainer.js","redux/contactsReduser.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","addContactWithLocalhost","deleteContact","changeFilter","getContacts","state","phoneBook","contacts","getFilter","filter","getFilteredContacts","createSelector","contact","name","toLowerCase","includes","INITIAL_STATE","number","ContactForm","handleChange","target","setState","value","handleSubmit","e","props","preventDefault","find","toastr","error","options","closeButton","debug","newestOnTop","progressBar","positionClass","preventDuplicates","onclick","showDuration","hideDuration","timeOut","extendedTimeOut","showEasing","hideEasing","showMethod","hideMethod","id","v4","reset","this","className","formPhonebook","onSubmit","formPhonebookLable","htmlFor","formPhonebookInput","type","onChange","required","formPhonebookButton","Component","connect","contactsSelectors","dispatch","newContact","contactAction","Filter","CSSTransition","in","length","timeout","classNames","fade","unmountOnExit","findContacts","findContactsParagraph","findContactsInput","findValue","Contact","onDeleteContact","contactListItem","contactListItemName","contactListItemNumber","buttonDelete","onClick","ContactList","filteredContacts","TransitionGroup","contactList","component","map","slide","key","App","loadLogo","localStorage","getItem","parseContacts","JSON","parse","setItem","prevProps","stringify","slideLogo","logoPhonebook","ContactFormContainer","FilterContainer","ContactListContainer","arrayContacts","contactsReducer","createReducer","contactsActions","action","payload","filterReducer","combineReducers","store","configureStore","reducer","contactsReduser","ReactDOM","render","AppContainer","document","getElementById"],"mappings":"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","file":"static/js/main.2b3f4740.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactListItem\":\"Contact_contactListItem__OaQ8d\",\"contactListItemName\":\"Contact_contactListItemName__3qxKz\",\"contactListItemNumber\":\"Contact_contactListItemNumber__36qow\",\"buttonDelete\":\"Contact_buttonDelete__3Soml\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"findContacts\":\"Filter_findContacts__1mfEc\",\"findContactsParagraph\":\"Filter_findContactsParagraph__1YwPw\",\"findContactsInput\":\"Filter_findContactsInput__cm9ks\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"fade_enter__1dpXZ\",\"enterActive\":\"fade_enterActive__1cNSm\",\"exit\":\"fade_exit__2sG6e\",\"exitActive\":\"fade_exitActive__1TjRo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__qXfBQ\",\"enterActive\":\"slide_enterActive__3He5X\",\"exit\":\"slide_exit__38Wyb\",\"exitActive\":\"slide_exitActive__4uOCz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__21kqv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logoPhonebook\":\"App_logoPhonebook__oD8Ct\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slideLogo_enter__29_8F\",\"enterActive\":\"slideLogo_enterActive__1jWvt\",\"exit\":\"slideLogo_exit__2kxqO\",\"exitActive\":\"slideLogo_exitActive__3xk2O\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const addContact = createAction('phonebook/addContact');\nexport const addContactWithLocalhost = createAction(\n  'phonebook/addContactWithLocalhost',\n);\nexport const deleteContact = createAction('phonebook/deleteContact');\nexport const changeFilter = createAction('phonebook/changeFilter');\n","import { createSelector } from 'reselect';\n\nexport const getContacts = state => state.phoneBook.contacts;\n\nexport const getFilter = state => state.phoneBook.filter;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    ),\n);\n","import React, { Component } from 'react';\nimport v4 from 'uuid/v4';\nimport toastr from 'toastr/toastr';\nimport 'toastr/build/toastr.css';\nimport PropTypes from 'prop-types';\nimport {\n  formPhonebook,\n  formPhonebookLable,\n  formPhonebookInput,\n  formPhonebookButton,\n} from './ContactForm.module.css';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\n\nclass ContactForm extends Component {\n  constructor() {\n    super();\n    this.state = { ...INITIAL_STATE };\n  }\n\n  handleChange = ({ target }) => {\n    this.setState({ [target.name]: target.value });\n  };\n\n  handleSubmit = e => {\n    const { name, number } = this.state;\n    const { contacts, addContact } = this.props;\n    e.preventDefault();\n    if (!contacts.find(contact => contact.name === name)) {\n      const newContact = {\n        id: v4(),\n        name,\n        number,\n      };\n      addContact(newContact);\n\n      this.reset();\n    } else {\n      toastr.error(`${name} is already in contacts.`);\n\n      toastr.options = {\n        closeButton: false,\n        debug: false,\n        newestOnTop: false,\n        progressBar: true,\n        positionClass: 'toast-top-right',\n        preventDuplicates: false,\n        onclick: null,\n        showDuration: '40000',\n        hideDuration: '2000',\n        timeOut: '250',\n        extendedTimeOut: '1000',\n        showEasing: 'swing',\n        hideEasing: 'swing',\n        showMethod: 'fadeIn',\n        hideMethod: 'fadeOut',\n      };\n    }\n  };\n\n  reset = () => {\n    this.setState({ ...INITIAL_STATE });\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form className={formPhonebook} onSubmit={this.handleSubmit}>\n        <label className={formPhonebookLable} htmlFor=\"formPhonebookName\">\n          Name\n          <input\n            className={formPhonebookInput}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            id=\"formPhonebookName\"\n            onChange={this.handleChange}\n            required\n          />\n        </label>\n\n        <label className={formPhonebookLable} htmlFor=\"formPhonebookNumber\">\n          Number\n          <input\n            className={formPhonebookInput}\n            type=\"number\"\n            name=\"number\"\n            value={number}\n            id=\"formPhonebookNumber\"\n            onChange={this.handleChange}\n            required\n          />\n        </label>\n\n        <button type=\"submit\" className={formPhonebookButton}>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  addContact: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","import { connect } from 'react-redux';\nimport * as contactAction from '../../redux/contactsActions';\nimport * as contactsSelectors from '../../redux/contactsSelectors';\nimport ContactForm from './ContactForm';\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addContact: newContact => dispatch(contactAction.addContact(newContact)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition } from 'react-transition-group';\nimport fade from '../transition/fade.module.css';\nimport {\n  findContacts,\n  findContactsParagraph,\n  findContactsInput,\n} from './Filter.module.css';\n\nconst Filter = ({ filter, contacts, changeFilter }) => {\n  const handleChange = ({ target }) => {\n    changeFilter(target.value);\n  };\n  return (\n    <CSSTransition\n      in={contacts.length > 1}\n      timeout={250}\n      classNames={fade}\n      unmountOnExit\n    >\n      <div className={findContacts}>\n        <p className={findContactsParagraph}>Find contacts by name</p>\n        <input\n          className={findContactsInput}\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={handleChange}\n        />\n      </div>\n    </CSSTransition>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  changeFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { connect } from 'react-redux';\nimport * as contactsSelectors from '../../redux/contactsSelectors';\nimport * as contactAction from '../../redux/contactsActions';\nimport Filter from './Filter';\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getContacts(state),\n  filter: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  changeFilter: findValue => dispatch(contactAction.changeFilter(findValue)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  contactListItem,\n  contactListItemName,\n  contactListItemNumber,\n  buttonDelete,\n} from './Contact.module.css';\n\nconst Contact = ({ contact, onDeleteContact }) => {\n  return (\n    <li className={contactListItem}>\n      <p className={contactListItemName}>{contact.name}</p>\n      <p className={contactListItemNumber}> {contact.number}</p>\n      <button type=\"button\" className={buttonDelete} onClick={onDeleteContact}>\n        ⛌\n      </button>\n    </li>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string,\n    number: PropTypes.string,\n  }).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default Contact;\n","import React from 'react';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport Contact from './Contact/Contact';\nimport slide from '../transition/slide.module.css';\nimport { contactList } from './ContactList.module.css';\n\nconst ContactList = ({ contacts, filteredContacts, deleteContact }) => {\n  return (\n    contacts.length > 0 && (\n      <TransitionGroup className={contactList} component=\"ul\">\n        {filteredContacts.map(contact => (\n          <CSSTransition\n            classNames={slide}\n            key={contact.id}\n            timeout={250}\n            unmountOnExit\n          >\n            <Contact\n              contact={contact}\n              onDeleteContact={() => deleteContact(contact.id)}\n            />\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    )\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  filteredContacts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import { connect } from 'react-redux';\nimport * as contactAction from '../../redux/contactsActions';\nimport * as contactsSelectors from '../../redux/contactsSelectors';\nimport ContactList from './ContactList';\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getContacts(state),\n  filteredContacts: contactsSelectors.getFilteredContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteContact: id => dispatch(contactAction.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition } from 'react-transition-group';\nimport ContactFormContainer from './ContactForm/ContactFormContainer';\nimport FilterContainer from './Filter/FilterContainer';\nimport ContactListContainer from './ContactList/ContactListContainer';\nimport { logoPhonebook } from './App.module.css';\nimport slideLogo from './transition/slideLogo.module.css';\n\nclass App extends Component {\n  loadLogo = false;\n\n  componentDidMount() {\n    const { addContactWithLocalhost } = this.props;\n    const getContacts = localStorage.getItem('contacts');\n    const parseContacts = JSON.parse(getContacts);\n    if (parseContacts) {\n      addContactWithLocalhost(parseContacts);\n    }\n    // addTestContacts\n    const testContacts = [\n      { id: 1, name: 'Volodymyr Zelensky', number: '+380 (44) 255–70–42' },\n      { id: 2, name: 'Vitali Klitschko', number: '+380 (44) 202-75-94' },\n    ];\n    if (localStorage.getItem('teatContactOn') !== 'true') {\n      addContactWithLocalhost(testContacts);\n      localStorage.setItem('teatContactOn', true);\n    }\n    this.loadLogo = true;\n  }\n\n  componentDidUpdate(prevProps) {\n    const { contacts } = this.props;\n    if (prevProps !== this.props) {\n      localStorage.setItem('contacts', JSON.stringify(contacts));\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <CSSTransition\n          in={this.loadLogo}\n          timeout={50000}\n          classNames={slideLogo}\n        >\n          <h1 className={logoPhonebook}>Phonebook</h1>\n        </CSSTransition>\n        <ContactFormContainer />\n        <FilterContainer />\n        <ContactListContainer />\n      </>\n    );\n  }\n}\n\nApp.propTypes = {\n  addContactWithLocalhost: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default App;\n","import { connect } from 'react-redux';\nimport * as contactAction from '../redux/contactsActions';\nimport * as contactsSelectors from '../redux/contactsSelectors';\nimport App from './App';\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addContactWithLocalhost: arrayContacts =>\n    dispatch(contactAction.addContactWithLocalhost(arrayContacts)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport * as contactsActions from './contactsActions';\n\nconst contactsReducer = createReducer([], {\n  [contactsActions.addContact]: (state, action) => [action.payload, ...state],\n  [contactsActions.addContactWithLocalhost]: (state, action) => [\n    ...action.payload,\n    ...state,\n  ],\n  [contactsActions.deleteContact]: (state, action) =>\n    state.filter(contact => contact.id !== action.payload),\n});\n\nconst filterReducer = createReducer('', {\n  [contactsActions.changeFilter]: (state, action) => `${action.payload}`,\n});\n\nexport default combineReducers({\n  contacts: contactsReducer,\n  filter: filterReducer,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport contactsReduser from './contactsReduser';\n\nconst store = configureStore({\n  reducer: { phoneBook: contactsReduser },\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport AppContainer from './components/AppContainer';\nimport store from './redux/store';\nimport './index.module.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <AppContainer />\n  </Provider>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formPhonebook\":\"ContactForm_formPhonebook__33s0J\",\"formPhonebookLable\":\"ContactForm_formPhonebookLable__1zDfu\",\"formPhonebookInput\":\"ContactForm_formPhonebookInput__4uV4l\",\"formPhonebookButton\":\"ContactForm_formPhonebookButton__3JfZ2\"};"],"sourceRoot":""}